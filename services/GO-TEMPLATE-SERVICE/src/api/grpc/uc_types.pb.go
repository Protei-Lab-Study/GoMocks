// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: uc_types.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//*
// Тип сообщения, посылаемого в рамках чата (P2P, группового и т.п.)
type ChatMessageType int32

const (
	ChatMessageType_UNKNOWN        ChatMessageType = 0   // Текстовое сообщение
	ChatMessageType_TEXT           ChatMessageType = 1   // Текстовое сообщение
	ChatMessageType_IMAGE          ChatMessageType = 2   // Изображение
	ChatMessageType_STICKER        ChatMessageType = 3   // Стикер
	ChatMessageType_AUDIO          ChatMessageType = 4   // Голосовая запись
	ChatMessageType_VIDEO          ChatMessageType = 5   // Видео запись
	ChatMessageType_FILE           ChatMessageType = 6   // Файл
	ChatMessageType_LOCATION       ChatMessageType = 7   // ГЕО-позиция
	ChatMessageType_CONTACT        ChatMessageType = 9   // Контакт
	ChatMessageType_FORWARD        ChatMessageType = 10  // Пересылка другого сообщения
	ChatMessageType_CALENDAR_EVENT ChatMessageType = 11  // Событие календаря
	ChatMessageType_NOTIFY         ChatMessageType = 100 // Произвольная нотификация в рамках чата
	ChatMessageType_CALL           ChatMessageType = 101 // Вызов (аудио / видео)
	ChatMessageType_GENERAL        ChatMessageType = 255 // Не специфицированное сообщение
)

// Enum value maps for ChatMessageType.
var (
	ChatMessageType_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "TEXT",
		2:   "IMAGE",
		3:   "STICKER",
		4:   "AUDIO",
		5:   "VIDEO",
		6:   "FILE",
		7:   "LOCATION",
		9:   "CONTACT",
		10:  "FORWARD",
		11:  "CALENDAR_EVENT",
		100: "NOTIFY",
		101: "CALL",
		255: "GENERAL",
	}
	ChatMessageType_value = map[string]int32{
		"UNKNOWN":        0,
		"TEXT":           1,
		"IMAGE":          2,
		"STICKER":        3,
		"AUDIO":          4,
		"VIDEO":          5,
		"FILE":           6,
		"LOCATION":       7,
		"CONTACT":        9,
		"FORWARD":        10,
		"CALENDAR_EVENT": 11,
		"NOTIFY":         100,
		"CALL":           101,
		"GENERAL":        255,
	}
)

func (x ChatMessageType) Enum() *ChatMessageType {
	p := new(ChatMessageType)
	*p = x
	return p
}

func (x ChatMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_uc_types_proto_enumTypes[0].Descriptor()
}

func (ChatMessageType) Type() protoreflect.EnumType {
	return &file_uc_types_proto_enumTypes[0]
}

func (x ChatMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatMessageType.Descriptor instead.
func (ChatMessageType) EnumDescriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{0}
}

type NotifyType int32

const (
	NotifyType_DELIVERED NotifyType = 0 // Сообщение доставлено
	NotifyType_READ      NotifyType = 1 // Сообщение прочитано
	NotifyType_DELETED   NotifyType = 2 // Сообщение удалено
	NotifyType_TYPING    NotifyType = 3 // Начало/остановка набора текста
	NotifyType_CHANGED   NotifyType = 4 // Редактирование сообщения
)

// Enum value maps for NotifyType.
var (
	NotifyType_name = map[int32]string{
		0: "DELIVERED",
		1: "READ",
		2: "DELETED",
		3: "TYPING",
		4: "CHANGED",
	}
	NotifyType_value = map[string]int32{
		"DELIVERED": 0,
		"READ":      1,
		"DELETED":   2,
		"TYPING":    3,
		"CHANGED":   4,
	}
)

func (x NotifyType) Enum() *NotifyType {
	p := new(NotifyType)
	*p = x
	return p
}

func (x NotifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_uc_types_proto_enumTypes[1].Descriptor()
}

func (NotifyType) Type() protoreflect.EnumType {
	return &file_uc_types_proto_enumTypes[1]
}

func (x NotifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyType.Descriptor instead.
func (NotifyType) EnumDescriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{1}
}

//*
// Тип вызова
// audio - голосовой вызов
// video - видео-вызов
type CallModeType int32

const (
	CallModeType_AUDIO_CALL_MODE CallModeType = 0
	CallModeType_VIDEO_CALL_MODE CallModeType = 1
)

// Enum value maps for CallModeType.
var (
	CallModeType_name = map[int32]string{
		0: "AUDIO_CALL_MODE",
		1: "VIDEO_CALL_MODE",
	}
	CallModeType_value = map[string]int32{
		"AUDIO_CALL_MODE": 0,
		"VIDEO_CALL_MODE": 1,
	}
)

func (x CallModeType) Enum() *CallModeType {
	p := new(CallModeType)
	*p = x
	return p
}

func (x CallModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_uc_types_proto_enumTypes[2].Descriptor()
}

func (CallModeType) Type() protoreflect.EnumType {
	return &file_uc_types_proto_enumTypes[2]
}

func (x CallModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallModeType.Descriptor instead.
func (CallModeType) EnumDescriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{2}
}

type ChatType int32

const (
	ChatType_P2P   ChatType = 0
	ChatType_GROUP ChatType = 1
)

// Enum value maps for ChatType.
var (
	ChatType_name = map[int32]string{
		0: "P2P",
		1: "GROUP",
	}
	ChatType_value = map[string]int32{
		"P2P":   0,
		"GROUP": 1,
	}
)

func (x ChatType) Enum() *ChatType {
	p := new(ChatType)
	*p = x
	return p
}

func (x ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_uc_types_proto_enumTypes[3].Descriptor()
}

func (ChatType) Type() protoreflect.EnumType {
	return &file_uc_types_proto_enumTypes[3]
}

func (x ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatType.Descriptor instead.
func (ChatType) EnumDescriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{3}
}

//*
// Направление запроса
// IN   - входящее сообщение
// POST - исходящее сообщение
type DirectionType int32

const (
	DirectionType_IN   DirectionType = 0
	DirectionType_POST DirectionType = 1
)

// Enum value maps for DirectionType.
var (
	DirectionType_name = map[int32]string{
		0: "IN",
		1: "POST",
	}
	DirectionType_value = map[string]int32{
		"IN":   0,
		"POST": 1,
	}
)

func (x DirectionType) Enum() *DirectionType {
	p := new(DirectionType)
	*p = x
	return p
}

func (x DirectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_uc_types_proto_enumTypes[4].Descriptor()
}

func (DirectionType) Type() protoreflect.EnumType {
	return &file_uc_types_proto_enumTypes[4]
}

func (x DirectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectionType.Descriptor instead.
func (DirectionType) EnumDescriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{4}
}

type ModeTypingEventType int32

const (
	ModeTypingEventType_START ModeTypingEventType = 0 // Пользователь начал набор сообщения
	ModeTypingEventType_STOP  ModeTypingEventType = 1 // Пользователь закончил набор сообщения
)

// Enum value maps for ModeTypingEventType.
var (
	ModeTypingEventType_name = map[int32]string{
		0: "START",
		1: "STOP",
	}
	ModeTypingEventType_value = map[string]int32{
		"START": 0,
		"STOP":  1,
	}
)

func (x ModeTypingEventType) Enum() *ModeTypingEventType {
	p := new(ModeTypingEventType)
	*p = x
	return p
}

func (x ModeTypingEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModeTypingEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_uc_types_proto_enumTypes[5].Descriptor()
}

func (ModeTypingEventType) Type() protoreflect.EnumType {
	return &file_uc_types_proto_enumTypes[5]
}

func (x ModeTypingEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModeTypingEventType.Descriptor instead.
func (ModeTypingEventType) EnumDescriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{5}
}

type ModeType int32

const (
	ModeType_FROM_ME       ModeType = 0 // Удалить сообщение только у меня
	ModeType_FROM_EVERYONE ModeType = 1 // Удалить сообщения у всех
)

// Enum value maps for ModeType.
var (
	ModeType_name = map[int32]string{
		0: "FROM_ME",
		1: "FROM_EVERYONE",
	}
	ModeType_value = map[string]int32{
		"FROM_ME":       0,
		"FROM_EVERYONE": 1,
	}
)

func (x ModeType) Enum() *ModeType {
	p := new(ModeType)
	*p = x
	return p
}

func (x ModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_uc_types_proto_enumTypes[6].Descriptor()
}

func (ModeType) Type() protoreflect.EnumType {
	return &file_uc_types_proto_enumTypes[6]
}

func (x ModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModeType.Descriptor instead.
func (ModeType) EnumDescriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{6}
}

type VcsStatus int32

const (
	VcsStatus_INACTIVE            VcsStatus = 0
	VcsStatus_ACTIVE              VcsStatus = 1
	VcsStatus_ACTIVATING          VcsStatus = 2
	VcsStatus_DEACTIVATING        VcsStatus = 3
	VcsStatus_REMOVED             VcsStatus = 4
	VcsStatus_MCU_ERROR           VcsStatus = 5
	VcsStatus_BLOCKED             VcsStatus = 6
	VcsStatus_CALLING             VcsStatus = 7
	VcsStatus_DIALING             VcsStatus = 8
	VcsStatus_AUTH                VcsStatus = 9
	VcsStatus_CALL_REPEAT_TIMEOUT VcsStatus = 10
)

// Enum value maps for VcsStatus.
var (
	VcsStatus_name = map[int32]string{
		0:  "INACTIVE",
		1:  "ACTIVE",
		2:  "ACTIVATING",
		3:  "DEACTIVATING",
		4:  "REMOVED",
		5:  "MCU_ERROR",
		6:  "BLOCKED",
		7:  "CALLING",
		8:  "DIALING",
		9:  "AUTH",
		10: "CALL_REPEAT_TIMEOUT",
	}
	VcsStatus_value = map[string]int32{
		"INACTIVE":            0,
		"ACTIVE":              1,
		"ACTIVATING":          2,
		"DEACTIVATING":        3,
		"REMOVED":             4,
		"MCU_ERROR":           5,
		"BLOCKED":             6,
		"CALLING":             7,
		"DIALING":             8,
		"AUTH":                9,
		"CALL_REPEAT_TIMEOUT": 10,
	}
)

func (x VcsStatus) Enum() *VcsStatus {
	p := new(VcsStatus)
	*p = x
	return p
}

func (x VcsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VcsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_uc_types_proto_enumTypes[7].Descriptor()
}

func (VcsStatus) Type() protoreflect.EnumType {
	return &file_uc_types_proto_enumTypes[7]
}

func (x VcsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VcsStatus.Descriptor instead.
func (VcsStatus) EnumDescriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{7}
}

type ScreenDivisionType int32

const (
	ScreenDivisionType_ALL_EQUALLY         ScreenDivisionType = 0
	ScreenDivisionType_ALL_ENLARGE_SPEAKER ScreenDivisionType = 1
	ScreenDivisionType_SPEAKER_ONLY        ScreenDivisionType = 2
	ScreenDivisionType_PRESENTATION_ONLY   ScreenDivisionType = 3
)

// Enum value maps for ScreenDivisionType.
var (
	ScreenDivisionType_name = map[int32]string{
		0: "ALL_EQUALLY",
		1: "ALL_ENLARGE_SPEAKER",
		2: "SPEAKER_ONLY",
		3: "PRESENTATION_ONLY",
	}
	ScreenDivisionType_value = map[string]int32{
		"ALL_EQUALLY":         0,
		"ALL_ENLARGE_SPEAKER": 1,
		"SPEAKER_ONLY":        2,
		"PRESENTATION_ONLY":   3,
	}
)

func (x ScreenDivisionType) Enum() *ScreenDivisionType {
	p := new(ScreenDivisionType)
	*p = x
	return p
}

func (x ScreenDivisionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScreenDivisionType) Descriptor() protoreflect.EnumDescriptor {
	return file_uc_types_proto_enumTypes[8].Descriptor()
}

func (ScreenDivisionType) Type() protoreflect.EnumType {
	return &file_uc_types_proto_enumTypes[8]
}

func (x ScreenDivisionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScreenDivisionType.Descriptor instead.
func (ScreenDivisionType) EnumDescriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{8}
}

//*
// Общая информация о пользователе UC
type GeneralUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           // Внутренний идентификатор пользователя UC
	ExternalUserId string `protobuf:"bytes,2,opt,name=external_user_id,json=externalUserId,proto3" json:"external_user_id,omitempty"`  // Внешний идентификатор пользователя
	Nickname       string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                                      // Имя пользователя
	Description    string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                // Поле "О себе..."
	Phone          string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`                                            // Номер телефона
	LastActivityAt int64  `protobuf:"varint,6,opt,name=last_activity_at,json=lastActivityAt,proto3" json:"last_activity_at,omitempty"` // Время последней активности пользователя
	CreatedAt      int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                  // Время, к второе пользователь был разрегистрирован в UC
	Blocked        bool   `protobuf:"varint,8,opt,name=blocked,proto3" json:"blocked,omitempty"`                                       // Пользователь заблокирован
	Email          string `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`                                            // Адрес электронной почты
	AvatarUrl      string `protobuf:"bytes,10,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                  // Ссылка на аватар пользователя
}

func (x *GeneralUserInfo) Reset() {
	*x = GeneralUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralUserInfo) ProtoMessage() {}

func (x *GeneralUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralUserInfo.ProtoReflect.Descriptor instead.
func (*GeneralUserInfo) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{0}
}

func (x *GeneralUserInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GeneralUserInfo) GetExternalUserId() string {
	if x != nil {
		return x.ExternalUserId
	}
	return ""
}

func (x *GeneralUserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *GeneralUserInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GeneralUserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GeneralUserInfo) GetLastActivityAt() int64 {
	if x != nil {
		return x.LastActivityAt
	}
	return 0
}

func (x *GeneralUserInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GeneralUserInfo) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *GeneralUserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GeneralUserInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

//*
// Общая информация о P2P чате
type P2PChatDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId               int64  `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                                               // Идентификатор чата
	OwnerId              int64  `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                                            // Идентификатор пользователя - владельца чата
	ParticipantId        int64  `protobuf:"varint,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`                          // Идентификатор пользователя - с которым данный чат
	Name                 string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Человекочитаемое имя чата
	Description          string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                                    // Описание чата
	LastReadEventId      int64  `protobuf:"varint,6,opt,name=last_read_event_id,json=lastReadEventId,proto3" json:"last_read_event_id,omitempty"`                // Идентификатор последнего прочитанного сообщения
	LastDeliveredEventId int64  `protobuf:"varint,7,opt,name=last_delivered_event_id,json=lastDeliveredEventId,proto3" json:"last_delivered_event_id,omitempty"` // Идентификатор последнего доставленного сообщения
	Archived             bool   `protobuf:"varint,8,opt,name=archived,proto3" json:"archived,omitempty"`                                                         // Пометка чата как "помещен в архив"
	Blocked              bool   `protobuf:"varint,9,opt,name=blocked,proto3" json:"blocked,omitempty"`
	AvatarUrl            string `protobuf:"bytes,10,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"` // Ссылка на аватар пользователя
}

func (x *P2PChatDescription) Reset() {
	*x = P2PChatDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PChatDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PChatDescription) ProtoMessage() {}

func (x *P2PChatDescription) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PChatDescription.ProtoReflect.Descriptor instead.
func (*P2PChatDescription) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{1}
}

func (x *P2PChatDescription) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *P2PChatDescription) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *P2PChatDescription) GetParticipantId() int64 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *P2PChatDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *P2PChatDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *P2PChatDescription) GetLastReadEventId() int64 {
	if x != nil {
		return x.LastReadEventId
	}
	return 0
}

func (x *P2PChatDescription) GetLastDeliveredEventId() int64 {
	if x != nil {
		return x.LastDeliveredEventId
	}
	return 0
}

func (x *P2PChatDescription) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *P2PChatDescription) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *P2PChatDescription) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

//*
// Снапшот определенного P2P чата
type P2PChatSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId               int64  `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                                               // Идентификатор чата
	OwnerId              int64  `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                                            // Идентификатор пользователя - владельца чата
	ParticipantId        int64  `protobuf:"varint,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`                          // Идентификатор пользователя - с которым данный чат
	Name                 string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Человекочитаемое имя чата
	Description          string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                                    // Описание чата
	LastReadEventId      int64  `protobuf:"varint,6,opt,name=last_read_event_id,json=lastReadEventId,proto3" json:"last_read_event_id,omitempty"`                // Идентификатор последнего прочитанного сообщения
	LastDeliveredEventId int64  `protobuf:"varint,7,opt,name=last_delivered_event_id,json=lastDeliveredEventId,proto3" json:"last_delivered_event_id,omitempty"` // Идентификатор последнего доставленного сообщения
	UnreadMessages       uint32 `protobuf:"varint,8,opt,name=unread_messages,json=unreadMessages,proto3" json:"unread_messages,omitempty"`                       // Количество непрочитанных в данном чате сообщений
	// Либо список первых N непрочитанных сообщений в рамках чата (если непрочитанных сообщений > N), либо
	// список последних N сообщений в рамках чата (включая как прочитанные, так и непрочитанные сообщения).
	Events []*ChatMessageEvent `protobuf:"bytes,9,rep,name=events,proto3" json:"events,omitempty"`
	// Последнее сообщение в рамках чата в случае, если в поле events содержатся не самые последние сообщения чата.
	// Это возможно в случае, если количество непрочитанных сообщений чата больше максимального количества возвращаемых
	// event-ов в снапшоте
	LastEvent *ChatMessageEvent `protobuf:"bytes,10,opt,name=last_event,json=lastEvent,proto3" json:"last_event,omitempty"`
	AvatarUrl string            `protobuf:"bytes,11,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"` // Ссылка на аватар чата
}

func (x *P2PChatSnapshot) Reset() {
	*x = P2PChatSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PChatSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PChatSnapshot) ProtoMessage() {}

func (x *P2PChatSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PChatSnapshot.ProtoReflect.Descriptor instead.
func (*P2PChatSnapshot) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{2}
}

func (x *P2PChatSnapshot) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *P2PChatSnapshot) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *P2PChatSnapshot) GetParticipantId() int64 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *P2PChatSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *P2PChatSnapshot) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *P2PChatSnapshot) GetLastReadEventId() int64 {
	if x != nil {
		return x.LastReadEventId
	}
	return 0
}

func (x *P2PChatSnapshot) GetLastDeliveredEventId() int64 {
	if x != nil {
		return x.LastDeliveredEventId
	}
	return 0
}

func (x *P2PChatSnapshot) GetUnreadMessages() uint32 {
	if x != nil {
		return x.UnreadMessages
	}
	return 0
}

func (x *P2PChatSnapshot) GetEvents() []*ChatMessageEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *P2PChatSnapshot) GetLastEvent() *ChatMessageEvent {
	if x != nil {
		return x.LastEvent
	}
	return nil
}

func (x *P2PChatSnapshot) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

//*
// Снапшот определенного Группового чата
type GroupChatSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId               int64  `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                                                // Идентификатор чата
	Name                 string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                   // Человекочитаемое имя чата
	Description          string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                     // Описание чата
	LastReadByMeEventId  int64  `protobuf:"varint,4,opt,name=last_read_by_me_event_id,json=lastReadByMeEventId,proto3" json:"last_read_by_me_event_id,omitempty"` // Идентификатор последнего прочитанного мною сообщения
	LastDeliveredEventId int64  `protobuf:"varint,5,opt,name=last_delivered_event_id,json=lastDeliveredEventId,proto3" json:"last_delivered_event_id,omitempty"`  // Идентификатор последнего доставленного сообщения в чате хотя бы одному участнику (не считая отправителя сообщения)
	LastReadEventId      int64  `protobuf:"varint,6,opt,name=last_read_event_id,json=lastReadEventId,proto3" json:"last_read_event_id,omitempty"`                 // Идентификатор последнего сообщение в чате, которое было прочитано кем либо (может быть как мое сообщение, так и чужое)
	UnreadMessages       uint32 `protobuf:"varint,8,opt,name=unread_messages,json=unreadMessages,proto3" json:"unread_messages,omitempty"`                        // Количество непрочитанных в данном чате сообщений
	// Либо список первых N непрочитанных сообщений в рамках чата (если непрочитанных сообщений > N), либо
	// список последних N сообщений в рамках чата (включая как прочитанные, так и непрочитанные сообщения).
	Events []*ChatMessageEvent `protobuf:"bytes,9,rep,name=events,proto3" json:"events,omitempty"`
	// Последнее сообщение в рамках чата в случае, если в поле events содержатся не самые последние сообщения чата.
	// Это возможно в случае, если количество непрочитанных сообщений чата больше максимального количества возвращаемых
	// event-ов в снапшоте
	LastEvent *ChatMessageEvent `protobuf:"bytes,10,opt,name=last_event,json=lastEvent,proto3" json:"last_event,omitempty"`
	Members   []int64           `protobuf:"varint,11,rep,packed,name=members,proto3" json:"members,omitempty"`              // Отсортированный список идентификаторов участников группы
	AvatarUrl string            `protobuf:"bytes,12,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"` // Ссылка на аватар чата
}

func (x *GroupChatSnapshot) Reset() {
	*x = GroupChatSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChatSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChatSnapshot) ProtoMessage() {}

func (x *GroupChatSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChatSnapshot.ProtoReflect.Descriptor instead.
func (*GroupChatSnapshot) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{3}
}

func (x *GroupChatSnapshot) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *GroupChatSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupChatSnapshot) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GroupChatSnapshot) GetLastReadByMeEventId() int64 {
	if x != nil {
		return x.LastReadByMeEventId
	}
	return 0
}

func (x *GroupChatSnapshot) GetLastDeliveredEventId() int64 {
	if x != nil {
		return x.LastDeliveredEventId
	}
	return 0
}

func (x *GroupChatSnapshot) GetLastReadEventId() int64 {
	if x != nil {
		return x.LastReadEventId
	}
	return 0
}

func (x *GroupChatSnapshot) GetUnreadMessages() uint32 {
	if x != nil {
		return x.UnreadMessages
	}
	return 0
}

func (x *GroupChatSnapshot) GetEvents() []*ChatMessageEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GroupChatSnapshot) GetLastEvent() *ChatMessageEvent {
	if x != nil {
		return x.LastEvent
	}
	return nil
}

func (x *GroupChatSnapshot) GetMembers() []int64 {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GroupChatSnapshot) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

//*
// Универсальное сообщение по обмену информации
type ChatMessageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  int64  `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`    // Уникальный идентификатор события в рамках системы
	Uuid     string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`                          // Уникальный идентификатор события (в рамках конкретного клиента), выставляемый на стороне клиента.
	ChatId   int64  `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`       // Идентификатор чата, в рамках которого находится данный event
	SenderId int64  `protobuf:"varint,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"` // Идентификатор отправителя сообщения (пользователь UC)
	// В случае "ответа" на сообщение, данное поле содержится идентификатор того сообщения, на которое пишется ответ
	ParentEventId int64           `protobuf:"varint,5,opt,name=parent_event_id,json=parentEventId,proto3" json:"parent_event_id,omitempty"`
	Type          ChatMessageType `protobuf:"varint,6,opt,name=type,proto3,enum=protei.uc.api.ChatMessageType" json:"type,omitempty"` // Тип события
	SentAt        int64           `protobuf:"varint,7,opt,name=sent_at,json=sentAt,proto3" json:"sent_at,omitempty"`                  // Время сохранения event-а на сервере (задается сервером). Формат: Unix timestamp (ms)
	ReceivedAt    int64           `protobuf:"varint,8,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`      // Время, в которое сообщение было доставлено пользователю на устройство. Формат: Unix timestamp (ms)
	ReadAt        int64           `protobuf:"varint,9,opt,name=read_at,json=readAt,proto3" json:"read_at,omitempty"`                  // Время прочтения сообщения клиентом. Формат: Unix timestamp (ms)
	// Строковое представление сообщения (форматированное текстовое сообщение, название файла, подпись к изображению и т.п.)
	Plaintext string   `protobuf:"bytes,10,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	Urls      []string `protobuf:"bytes,11,rep,name=urls,proto3" json:"urls,omitempty"` // Список ссылок, присутствующих в данном сообщении
	// Все остальные не типизированные поля сообщения, записанные в JSON формате.
	// Тут же будет храниться и исходное сообщение в сыром виде, чтобы передать его на клиента.
	Mentions []int64 `protobuf:"varint,12,rep,packed,name=mentions,proto3" json:"mentions,omitempty"` // Список идентификаторов пользователей, упомянутых в данном сообщении
	// Различные не специфицированные поля сообщения
	// Известные ключи:
	//   - correlation_id :: int64 - идентификатор связанного сообщения;
	//   - parent_correlation_id :: int64 - идентификатор связанного сообщения для поля parent_event_id;
	//   - update_complementary_parent_id :: bool - признак для БД о необходимости найти parent_event_id на основе correlation_id;
	//   - changed :: bool - признак того, что сообщение было изменено;
	//   - partial :: bool - признак того, что текст сообщение превысил границы максимального размера сообщения, и был урезан.
	//                       для получения полного сообщения его необходимо запросить отдельно по event_id;
	//   - meta    :: json - произвольный JSON документ;
	Options  map[string]string `protobuf:"bytes,13,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ChatType ChatType          `protobuf:"varint,14,opt,name=chat_type,json=chatType,proto3,enum=protei.uc.api.ChatType" json:"chat_type,omitempty"`
}

func (x *ChatMessageEvent) Reset() {
	*x = ChatMessageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageEvent) ProtoMessage() {}

func (x *ChatMessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageEvent.ProtoReflect.Descriptor instead.
func (*ChatMessageEvent) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{4}
}

func (x *ChatMessageEvent) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *ChatMessageEvent) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ChatMessageEvent) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatMessageEvent) GetSenderId() int64 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *ChatMessageEvent) GetParentEventId() int64 {
	if x != nil {
		return x.ParentEventId
	}
	return 0
}

func (x *ChatMessageEvent) GetType() ChatMessageType {
	if x != nil {
		return x.Type
	}
	return ChatMessageType_UNKNOWN
}

func (x *ChatMessageEvent) GetSentAt() int64 {
	if x != nil {
		return x.SentAt
	}
	return 0
}

func (x *ChatMessageEvent) GetReceivedAt() int64 {
	if x != nil {
		return x.ReceivedAt
	}
	return 0
}

func (x *ChatMessageEvent) GetReadAt() int64 {
	if x != nil {
		return x.ReadAt
	}
	return 0
}

func (x *ChatMessageEvent) GetPlaintext() string {
	if x != nil {
		return x.Plaintext
	}
	return ""
}

func (x *ChatMessageEvent) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *ChatMessageEvent) GetMentions() []int64 {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *ChatMessageEvent) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ChatMessageEvent) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_P2P
}

//*
// Универсальное сообщение по обмену нотификациями
type ChatNotifyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId       int64             `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                     // Идентификатор чата, в рамках которого находится данный event
	NotifiedAt   int64             `protobuf:"varint,2,opt,name=notified_at,json=notifiedAt,proto3" json:"notified_at,omitempty"`         // Время сохранения event-а на сервере (задается сервером). Формат: Unix timestamp (ms)
	BeginEventId int64             `protobuf:"varint,3,opt,name=begin_event_id,json=beginEventId,proto3" json:"begin_event_id,omitempty"` // Уникальный идентификатор события с которого нужно начинать выставлять "прочитано", "доставлено"...
	EndEventId   int64             `protobuf:"varint,4,opt,name=end_event_id,json=endEventId,proto3" json:"end_event_id,omitempty"`       // Уникальный идентификатор события до которого нужно выставлять "прочитано", "доставлено"...
	SenderId     int64             `protobuf:"varint,5,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`               // Уникальный идентификатор пользователя, который отправил нотификацию
	Type         NotifyType        `protobuf:"varint,6,opt,name=type,proto3,enum=protei.uc.api.NotifyType" json:"type,omitempty"`         // Тип нотификации
	Options      map[string]string `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChatNotifyEvent) Reset() {
	*x = ChatNotifyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatNotifyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatNotifyEvent) ProtoMessage() {}

func (x *ChatNotifyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatNotifyEvent.ProtoReflect.Descriptor instead.
func (*ChatNotifyEvent) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{5}
}

func (x *ChatNotifyEvent) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatNotifyEvent) GetNotifiedAt() int64 {
	if x != nil {
		return x.NotifiedAt
	}
	return 0
}

func (x *ChatNotifyEvent) GetBeginEventId() int64 {
	if x != nil {
		return x.BeginEventId
	}
	return 0
}

func (x *ChatNotifyEvent) GetEndEventId() int64 {
	if x != nil {
		return x.EndEventId
	}
	return 0
}

func (x *ChatNotifyEvent) GetSenderId() int64 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *ChatNotifyEvent) GetType() NotifyType {
	if x != nil {
		return x.Type
	}
	return NotifyType_DELIVERED
}

func (x *ChatNotifyEvent) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

//*
// Сообщение для удаления чата
type ChatDeleteNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId  int64 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`    // Идентификатор чата, который удален
	OwnerId int64 `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"` // Идентификатор пользователя - владельца чата
}

func (x *ChatDeleteNotify) Reset() {
	*x = ChatDeleteNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatDeleteNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatDeleteNotify) ProtoMessage() {}

func (x *ChatDeleteNotify) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatDeleteNotify.ProtoReflect.Descriptor instead.
func (*ChatDeleteNotify) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{6}
}

func (x *ChatDeleteNotify) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatDeleteNotify) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

//*
// Сообщение для удаления сообщений
type ChatDeleteNotifyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId   int64             `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`              // Идентификатор чата, в рамках которого находится данный event
	EventsId []int64           `protobuf:"varint,2,rep,packed,name=events_id,json=eventsId,proto3" json:"events_id,omitempty"` // Список уникальных идентификаторов сообщений, которые нужно удалить
	Options  map[string]string `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChatDeleteNotifyEvent) Reset() {
	*x = ChatDeleteNotifyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatDeleteNotifyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatDeleteNotifyEvent) ProtoMessage() {}

func (x *ChatDeleteNotifyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatDeleteNotifyEvent.ProtoReflect.Descriptor instead.
func (*ChatDeleteNotifyEvent) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{7}
}

func (x *ChatDeleteNotifyEvent) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatDeleteNotifyEvent) GetEventsId() []int64 {
	if x != nil {
		return x.EventsId
	}
	return nil
}

func (x *ChatDeleteNotifyEvent) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

//*
// Сообщение посылаемое на UI для того, чтобы UI открыл указанный чат на экране
type OpenChatUIControlEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int64 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"` // Идентификатор чата, который необходимо открыть
}

func (x *OpenChatUIControlEvent) Reset() {
	*x = OpenChatUIControlEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenChatUIControlEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChatUIControlEvent) ProtoMessage() {}

func (x *OpenChatUIControlEvent) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChatUIControlEvent.ProtoReflect.Descriptor instead.
func (*OpenChatUIControlEvent) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{8}
}

func (x *OpenChatUIControlEvent) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

//*
// Сообщение посылаемое на UI для того, чтобы UI сделано аудио/видео вызов на определенный uri
type MakeCallUIControlEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uri, на который необходимо сделать вызов. Формат: ^(sips?:[^@]+@[^@]+|tel:\+?[0-9ABCD\*#]+|uc-user:\d{1,19})$
	// Примеры: sip:Bob@192.168.100.13:6050 | tel:+79039110001 | uc-user:725
	Uri  string       `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Mode CallModeType `protobuf:"varint,2,opt,name=mode,proto3,enum=protei.uc.api.CallModeType" json:"mode,omitempty"`
}

func (x *MakeCallUIControlEvent) Reset() {
	*x = MakeCallUIControlEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeCallUIControlEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeCallUIControlEvent) ProtoMessage() {}

func (x *MakeCallUIControlEvent) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeCallUIControlEvent.ProtoReflect.Descriptor instead.
func (*MakeCallUIControlEvent) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{9}
}

func (x *MakeCallUIControlEvent) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *MakeCallUIControlEvent) GetMode() CallModeType {
	if x != nil {
		return x.Mode
	}
	return CallModeType_AUDIO_CALL_MODE
}

//*
// Параметры запроса на сохранение сообщений в БД
type StoreMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*ChatMessageEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"` // Список сообщений, которые необходимо сохранить
}

func (x *StoreMessageRequest) Reset() {
	*x = StoreMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreMessageRequest) ProtoMessage() {}

func (x *StoreMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreMessageRequest.ProtoReflect.Descriptor instead.
func (*StoreMessageRequest) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{10}
}

func (x *StoreMessageRequest) GetEvents() []*ChatMessageEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

//*
// Параметры ответа на запрос на сохранение сообщений в БД
type StoreMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Результат выполнения команды.
	// OK - команда успешно выполнена;
	// USER_NOT_FOUND - пользователь с указанным идентификатором не найден;
	// PARTIAL_SUCCESS - не все события удалось сохранить;
	ResultCode   ResultCode          `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"`
	StoredEvents []*ChatMessageEvent `protobuf:"bytes,2,rep,name=stored_events,json=storedEvents,proto3" json:"stored_events,omitempty"` // Список сохраненных событий (с обновленной на основе БД событий)
	FailedEvents []*FailedEvent      `protobuf:"bytes,3,rep,name=failed_events,json=failedEvents,proto3" json:"failed_events,omitempty"` // Список событий, которые не удалось сохранить БД
}

func (x *StoreMessageResponse) Reset() {
	*x = StoreMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreMessageResponse) ProtoMessage() {}

func (x *StoreMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreMessageResponse.ProtoReflect.Descriptor instead.
func (*StoreMessageResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{11}
}

func (x *StoreMessageResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *StoreMessageResponse) GetStoredEvents() []*ChatMessageEvent {
	if x != nil {
		return x.StoredEvents
	}
	return nil
}

func (x *StoreMessageResponse) GetFailedEvents() []*FailedEvent {
	if x != nil {
		return x.FailedEvents
	}
	return nil
}

//*
// Информация о event-е, который не удалось сохранить, с причиной не успешности
type FailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode ResultCode `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"` // Ошибка по которой не удалось сохранить событие
	Uuid       string     `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                              // Уникальный идентификатор события (в рамках конкретного клиента), которое не удалось сохранить
	Error      *Error     `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`                                                            // Сообщение об ошибке
}

func (x *FailedEvent) Reset() {
	*x = FailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedEvent) ProtoMessage() {}

func (x *FailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedEvent.ProtoReflect.Descriptor instead.
func (*FailedEvent) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{12}
}

func (x *FailedEvent) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *FailedEvent) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FailedEvent) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

//*
// Составной идентификатор event-а. Используется для случаев p2p чатов, когда необходимо связать между собой event-ы
// с соседний чатов. event_id - это внутренний идентификатор события. correlation_id - это идентификатор того же события,
// только в соседнем чате
type ComplexEventId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                   // Внутренний идентификатор события чата (из базы). Если значение не задано, поле равно -1.
	CorrelationId int64 `protobuf:"varint,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"` // Внутренний идентификатор события из связанного P2P чата. Если значение не задано, поле равно -1.
}

func (x *ComplexEventId) Reset() {
	*x = ComplexEventId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexEventId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexEventId) ProtoMessage() {}

func (x *ComplexEventId) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexEventId.ProtoReflect.Descriptor instead.
func (*ComplexEventId) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{13}
}

func (x *ComplexEventId) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *ComplexEventId) GetCorrelationId() int64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

//*
// Параметры запроса на пометку сообщения как "прочитанное"
type MarkEventAsReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId   int64           `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`       // Идентификатор чата, по которому запрашиваются события
	EventId  *ComplexEventId `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`     // Идентификатор события, которое должно стать последним прочитанным сообщением в чате
	ReadAt   int64           `protobuf:"varint,3,opt,name=read_at,json=readAt,proto3" json:"read_at,omitempty"`       // Время прочтения event-а на сервере (задается сервером). Формат: Unix timestamp (ms)
	SenderId int64           `protobuf:"varint,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"` // Уникальный идентификатор пользователя, который отправил нотификацию
}

func (x *MarkEventAsReadRequest) Reset() {
	*x = MarkEventAsReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkEventAsReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkEventAsReadRequest) ProtoMessage() {}

func (x *MarkEventAsReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkEventAsReadRequest.ProtoReflect.Descriptor instead.
func (*MarkEventAsReadRequest) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{14}
}

func (x *MarkEventAsReadRequest) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *MarkEventAsReadRequest) GetEventId() *ComplexEventId {
	if x != nil {
		return x.EventId
	}
	return nil
}

func (x *MarkEventAsReadRequest) GetReadAt() int64 {
	if x != nil {
		return x.ReadAt
	}
	return 0
}

func (x *MarkEventAsReadRequest) GetSenderId() int64 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

//*
// Параметры ответа на запрос на пометку сообщения как "прочитанное"
type MarkEventAsReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Код возврата на выполнения запроса
	// OK - событие успешно помечено как прочитанное;
	// CHAT_NOT_FOUND - чат не найден.
	ResultCode      ResultCode      `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"`
	CurLastEventId  *ComplexEventId `protobuf:"bytes,2,opt,name=cur_last_event_id,json=curLastEventId,proto3" json:"cur_last_event_id,omitempty"`    // Идентификатор текущего последнего прочитанного события
	PrevLastEventId *ComplexEventId `protobuf:"bytes,3,opt,name=prev_last_event_id,json=prevLastEventId,proto3" json:"prev_last_event_id,omitempty"` // Идентификатор предыдущего последнего доставленного события
	Error           *Error          `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                                                // Поле для передачи ошибки, при выполнении запроса (заполняется если resultCode != OK)
	UnreadMessages  int32           `protobuf:"varint,5,opt,name=unread_messages,json=unreadMessages,proto3" json:"unread_messages,omitempty"`       // Оставшееся количество непрочитанных сообщений в чате
}

func (x *MarkEventAsReadResponse) Reset() {
	*x = MarkEventAsReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkEventAsReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkEventAsReadResponse) ProtoMessage() {}

func (x *MarkEventAsReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkEventAsReadResponse.ProtoReflect.Descriptor instead.
func (*MarkEventAsReadResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{15}
}

func (x *MarkEventAsReadResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *MarkEventAsReadResponse) GetCurLastEventId() *ComplexEventId {
	if x != nil {
		return x.CurLastEventId
	}
	return nil
}

func (x *MarkEventAsReadResponse) GetPrevLastEventId() *ComplexEventId {
	if x != nil {
		return x.PrevLastEventId
	}
	return nil
}

func (x *MarkEventAsReadResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *MarkEventAsReadResponse) GetUnreadMessages() int32 {
	if x != nil {
		return x.UnreadMessages
	}
	return 0
}

//*
// Параметры запроса на пометку сообщения как "доставленное"
type MarkEventAsDeliveredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId      int64           `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                // Идентификатор чата, по которому относится событие
	EventId     *ComplexEventId `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`              // Идентификатор события, которое должно стать последним доставленным сообщением в чате
	DeliveredAt int64           `protobuf:"varint,3,opt,name=delivered_at,json=deliveredAt,proto3" json:"delivered_at,omitempty"` // Время доставки event-а на сервере (задается сервером). Формат: Unix timestamp (ms)
	SenderId    int64           `protobuf:"varint,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`          // Уникальный идентификатор пользователя, который отправил нотификацию
}

func (x *MarkEventAsDeliveredRequest) Reset() {
	*x = MarkEventAsDeliveredRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkEventAsDeliveredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkEventAsDeliveredRequest) ProtoMessage() {}

func (x *MarkEventAsDeliveredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkEventAsDeliveredRequest.ProtoReflect.Descriptor instead.
func (*MarkEventAsDeliveredRequest) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{16}
}

func (x *MarkEventAsDeliveredRequest) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *MarkEventAsDeliveredRequest) GetEventId() *ComplexEventId {
	if x != nil {
		return x.EventId
	}
	return nil
}

func (x *MarkEventAsDeliveredRequest) GetDeliveredAt() int64 {
	if x != nil {
		return x.DeliveredAt
	}
	return 0
}

func (x *MarkEventAsDeliveredRequest) GetSenderId() int64 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

//*
// Параметры ответа на запрос на пометку сообщения как "доставленное"
type MarkEventAsDeliveredResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Код возврата на выполнения запроса
	// OK - событие успешно помечено как доставленное;
	// CHAT_NOT_FOUND - чат не найден.
	ResultCode      ResultCode      `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"`
	CurLastEventId  *ComplexEventId `protobuf:"bytes,2,opt,name=cur_last_event_id,json=curLastEventId,proto3" json:"cur_last_event_id,omitempty"`    // Идентификатор текущего последнего доставленного события
	PrevLastEventId *ComplexEventId `protobuf:"bytes,3,opt,name=prev_last_event_id,json=prevLastEventId,proto3" json:"prev_last_event_id,omitempty"` // Идентификатор предыдущего последнего доставленного события
	Error           *Error          `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                                                // Поле для передачи ошибки, при выполнении запроса (заполняется если resultCode != OK)
}

func (x *MarkEventAsDeliveredResponse) Reset() {
	*x = MarkEventAsDeliveredResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkEventAsDeliveredResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkEventAsDeliveredResponse) ProtoMessage() {}

func (x *MarkEventAsDeliveredResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkEventAsDeliveredResponse.ProtoReflect.Descriptor instead.
func (*MarkEventAsDeliveredResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{17}
}

func (x *MarkEventAsDeliveredResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *MarkEventAsDeliveredResponse) GetCurLastEventId() *ComplexEventId {
	if x != nil {
		return x.CurLastEventId
	}
	return nil
}

func (x *MarkEventAsDeliveredResponse) GetPrevLastEventId() *ComplexEventId {
	if x != nil {
		return x.PrevLastEventId
	}
	return nil
}

func (x *MarkEventAsDeliveredResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

//*
// Параметры запроса на пометку сообщения как "прочитанное" для группового чата
type MarkGroupEventAsReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId   int64 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`       // Идентификатор чата, для которого выполняется данная команда
	EventId  int64 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`    // Идентификатор события, которое должно стать последним прочитанным сообщением в групповом чате
	ReadAt   int64 `protobuf:"varint,3,opt,name=read_at,json=readAt,proto3" json:"read_at,omitempty"`       // Время прочтения event-а на сервере (задается сервером). Формат: Unix timestamp (ms)
	SenderId int64 `protobuf:"varint,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"` // Идентификатор пользователя, который прочитал сообщение
}

func (x *MarkGroupEventAsReadRequest) Reset() {
	*x = MarkGroupEventAsReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkGroupEventAsReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkGroupEventAsReadRequest) ProtoMessage() {}

func (x *MarkGroupEventAsReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkGroupEventAsReadRequest.ProtoReflect.Descriptor instead.
func (*MarkGroupEventAsReadRequest) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{18}
}

func (x *MarkGroupEventAsReadRequest) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *MarkGroupEventAsReadRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *MarkGroupEventAsReadRequest) GetReadAt() int64 {
	if x != nil {
		return x.ReadAt
	}
	return 0
}

func (x *MarkGroupEventAsReadRequest) GetSenderId() int64 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

//*
// Параметры ответа на запрос на пометку сообщения как "прочитанное" для группового чата
type MarkGroupEventAsReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Код возврата на выполнения запроса
	// OK - событие успешно помечено как прочитанное;
	// USER_NOT_FOUND - пользователь не найден в групповом чате;
	// CHAT_NOT_FOUND - групповой чат не найден.
	ResultCode      ResultCode `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"`
	CurLastEventId  int64      `protobuf:"varint,2,opt,name=cur_last_event_id,json=curLastEventId,proto3" json:"cur_last_event_id,omitempty"`    // Идентификатор текущего последнего прочитанного события
	PrevLastEventId int64      `protobuf:"varint,3,opt,name=prev_last_event_id,json=prevLastEventId,proto3" json:"prev_last_event_id,omitempty"` // Идентификатор предыдущего последнего доставленного события
	Error           *Error     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                                                 // Поле для передачи ошибки, при выполнении запроса (заполняется если resultCode != OK)
	UnreadMessages  int32      `protobuf:"varint,5,opt,name=unread_messages,json=unreadMessages,proto3" json:"unread_messages,omitempty"`        // Оставшееся количество непрочитанных сообщений в чате
}

func (x *MarkGroupEventAsReadResponse) Reset() {
	*x = MarkGroupEventAsReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkGroupEventAsReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkGroupEventAsReadResponse) ProtoMessage() {}

func (x *MarkGroupEventAsReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkGroupEventAsReadResponse.ProtoReflect.Descriptor instead.
func (*MarkGroupEventAsReadResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{19}
}

func (x *MarkGroupEventAsReadResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *MarkGroupEventAsReadResponse) GetCurLastEventId() int64 {
	if x != nil {
		return x.CurLastEventId
	}
	return 0
}

func (x *MarkGroupEventAsReadResponse) GetPrevLastEventId() int64 {
	if x != nil {
		return x.PrevLastEventId
	}
	return 0
}

func (x *MarkGroupEventAsReadResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *MarkGroupEventAsReadResponse) GetUnreadMessages() int32 {
	if x != nil {
		return x.UnreadMessages
	}
	return 0
}

//*
// Параметры запроса на пометку сообщения как "доставленное" для группового чата
type MarkGroupEventAsDeliveredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId      int64 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                // Идентификатор чата, для которого выполняется данная команда
	EventId     int64 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`             // Идентификатор события, которое должно стать последним доставленным сообщением в чате
	DeliveredAt int64 `protobuf:"varint,3,opt,name=delivered_at,json=deliveredAt,proto3" json:"delivered_at,omitempty"` // Время доставки event-а на сервере (задается сервером). Формат: Unix timestamp (ms)
	SenderId    int64 `protobuf:"varint,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`          // Уникальный идентификатор пользователя, который отправил нотификацию
}

func (x *MarkGroupEventAsDeliveredRequest) Reset() {
	*x = MarkGroupEventAsDeliveredRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkGroupEventAsDeliveredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkGroupEventAsDeliveredRequest) ProtoMessage() {}

func (x *MarkGroupEventAsDeliveredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkGroupEventAsDeliveredRequest.ProtoReflect.Descriptor instead.
func (*MarkGroupEventAsDeliveredRequest) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{20}
}

func (x *MarkGroupEventAsDeliveredRequest) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *MarkGroupEventAsDeliveredRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *MarkGroupEventAsDeliveredRequest) GetDeliveredAt() int64 {
	if x != nil {
		return x.DeliveredAt
	}
	return 0
}

func (x *MarkGroupEventAsDeliveredRequest) GetSenderId() int64 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

//*
// Параметры ответа на запрос на пометку сообщения как "доставленное" для группового чата
type MarkGroupEventAsDeliveredResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Код возврата на выполнения запроса
	// OK - событие успешно помечено как доставленное;
	// USER_NOT_FOUND - пользователь не найден в групповом чате;
	// CHAT_NOT_FOUND - чат не найден.
	ResultCode      ResultCode `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"`
	CurLastEventId  int64      `protobuf:"varint,2,opt,name=cur_last_event_id,json=curLastEventId,proto3" json:"cur_last_event_id,omitempty"`    // Идентификатор текущего последнего доставленного события
	PrevLastEventId int64      `protobuf:"varint,3,opt,name=prev_last_event_id,json=prevLastEventId,proto3" json:"prev_last_event_id,omitempty"` // Идентификатор предыдущего последнего доставленного события
	Error           *Error     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                                                 // Поле для передачи ошибки, при выполнении запроса (заполняется если resultCode != OK)
}

func (x *MarkGroupEventAsDeliveredResponse) Reset() {
	*x = MarkGroupEventAsDeliveredResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkGroupEventAsDeliveredResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkGroupEventAsDeliveredResponse) ProtoMessage() {}

func (x *MarkGroupEventAsDeliveredResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkGroupEventAsDeliveredResponse.ProtoReflect.Descriptor instead.
func (*MarkGroupEventAsDeliveredResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{21}
}

func (x *MarkGroupEventAsDeliveredResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *MarkGroupEventAsDeliveredResponse) GetCurLastEventId() int64 {
	if x != nil {
		return x.CurLastEventId
	}
	return 0
}

func (x *MarkGroupEventAsDeliveredResponse) GetPrevLastEventId() int64 {
	if x != nil {
		return x.PrevLastEventId
	}
	return 0
}

func (x *MarkGroupEventAsDeliveredResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

//*
// Параметры запроса на получение информации по определенной группе
type GroupChatInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId     int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`             // Идентификатор группы
	WithMembers bool  `protobuf:"varint,2,opt,name=with_members,json=withMembers,proto3" json:"with_members,omitempty"` // Возвращать список участников группы, или нет
}

func (x *GroupChatInfoRequest) Reset() {
	*x = GroupChatInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChatInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChatInfoRequest) ProtoMessage() {}

func (x *GroupChatInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChatInfoRequest.ProtoReflect.Descriptor instead.
func (*GroupChatInfoRequest) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{22}
}

func (x *GroupChatInfoRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupChatInfoRequest) GetWithMembers() bool {
	if x != nil {
		return x.WithMembers
	}
	return false
}

//*
// Ответ на запрос на получение информации по определенной группе
type GroupChatInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Результат выполнения команды.
	// OK - команда успешно выполнена;
	// NOT_FOUND - группа с указанным идентификатором не найдена;
	// DB_CONNECTION_ERROR - соединение с базой не установлено;
	// UNKNOWN_ERROR - неизвестная ошибка
	ResultCode ResultCode     `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"`
	Error      *Error         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"` // Сообщение об ошибке
	Info       *GroupChatInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`   // Информация о группе
}

func (x *GroupChatInfoResponse) Reset() {
	*x = GroupChatInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChatInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChatInfoResponse) ProtoMessage() {}

func (x *GroupChatInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChatInfoResponse.ProtoReflect.Descriptor instead.
func (*GroupChatInfoResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{23}
}

func (x *GroupChatInfoResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *GroupChatInfoResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GroupChatInfoResponse) GetInfo() *GroupChatInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

//*
// Структура для общего описания группового чата на уровне API
type GroupChatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId              int64   `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                                            // Идентификатор группового чата
	OwnerId              int64   `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                                            // Идентификатор пользователя, создавшего группу
	Name                 string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Имя группы
	Description          string  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                                    // Описание группы
	Blocked              bool    `protobuf:"varint,5,opt,name=blocked,proto3" json:"blocked,omitempty"`                                                           // Группа заблокирована
	Deleted              bool    `protobuf:"varint,6,opt,name=deleted,proto3" json:"deleted,omitempty"`                                                           // Группа удалена
	AvatarUrl            string  `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                                       // Ссылка на аватар группы
	LastReadEventId      int64   `protobuf:"varint,8,opt,name=last_read_event_id,json=lastReadEventId,proto3" json:"last_read_event_id,omitempty"`                // Идентификатор последнего прочитанного сообщения группы
	LastDeliveredEventId int64   `protobuf:"varint,9,opt,name=last_delivered_event_id,json=lastDeliveredEventId,proto3" json:"last_delivered_event_id,omitempty"` // Идентификатор последнего доставленного сообщения группы
	Members              []int64 `protobuf:"varint,10,rep,packed,name=members,proto3" json:"members,omitempty"`                                                   // Список идентификаторов участников группы
}

func (x *GroupChatInfo) Reset() {
	*x = GroupChatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChatInfo) ProtoMessage() {}

func (x *GroupChatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChatInfo.ProtoReflect.Descriptor instead.
func (*GroupChatInfo) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{24}
}

func (x *GroupChatInfo) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupChatInfo) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *GroupChatInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupChatInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GroupChatInfo) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *GroupChatInfo) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *GroupChatInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GroupChatInfo) GetLastReadEventId() int64 {
	if x != nil {
		return x.LastReadEventId
	}
	return 0
}

func (x *GroupChatInfo) GetLastDeliveredEventId() int64 {
	if x != nil {
		return x.LastDeliveredEventId
	}
	return 0
}

func (x *GroupChatInfo) GetMembers() []int64 {
	if x != nil {
		return x.Members
	}
	return nil
}

//*
// Параметры запроса на создание группового чата
type CreateGroupChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            // Имя группы
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`              // Описание группы
	OwnerId     int64   `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`      // Идентификатор владельца группы
	Blocked     bool    `protobuf:"varint,4,opt,name=blocked,proto3" json:"blocked,omitempty"`                     // Группа заблокирована
	AvatarUrl   string  `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"` // Ссылка на аватар пользователя
	Members     []int64 `protobuf:"varint,6,rep,packed,name=members,proto3" json:"members,omitempty"`              // Список идентификаторов участников группы
}

func (x *CreateGroupChatRequest) Reset() {
	*x = CreateGroupChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupChatRequest) ProtoMessage() {}

func (x *CreateGroupChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupChatRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupChatRequest) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{25}
}

func (x *CreateGroupChatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGroupChatRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateGroupChatRequest) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *CreateGroupChatRequest) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *CreateGroupChatRequest) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *CreateGroupChatRequest) GetMembers() []int64 {
	if x != nil {
		return x.Members
	}
	return nil
}

//*
// Ответ на запрос на создание группового чата
type CreateGroupChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Результат выполнения команды.
	// OK - команда успешно выполнена;
	// DB_CONNECTION_ERROR - соединение с базой не установлено;
	// USER_NOT_FOUND - один или несколько пользователей из списка members не найден
	// UNKNOWN_ERROR - неизвестная ошибка
	ResultCode ResultCode     `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"`
	Error      *Error         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"` // Сообщение об ошибке
	Info       *GroupChatInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`   // Информация о групповом чате
}

func (x *CreateGroupChatResponse) Reset() {
	*x = CreateGroupChatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupChatResponse) ProtoMessage() {}

func (x *CreateGroupChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupChatResponse.ProtoReflect.Descriptor instead.
func (*CreateGroupChatResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{26}
}

func (x *CreateGroupChatResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *CreateGroupChatResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateGroupChatResponse) GetInfo() *GroupChatInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

//*
// Параметры запроса на удаление события в групповом чате
type DeleteGroupChatEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId  int64    `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`           // Идентификатор группового чата, из которого необходимо удалить события
	UserId  int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`           // Пользователь, вызывающий команду на удаление event-а
	Mode    ModeType `protobuf:"varint,3,opt,name=mode,proto3,enum=protei.uc.api.ModeType" json:"mode,omitempty"` // Режим удаления сообщения
	EventId []int64  `protobuf:"varint,4,rep,packed,name=event_id,json=eventId,proto3" json:"event_id,omitempty"` // Идентификатор событий, которые необходимо удалить
}

func (x *DeleteGroupChatEventRequest) Reset() {
	*x = DeleteGroupChatEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupChatEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupChatEventRequest) ProtoMessage() {}

func (x *DeleteGroupChatEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupChatEventRequest.ProtoReflect.Descriptor instead.
func (*DeleteGroupChatEventRequest) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteGroupChatEventRequest) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *DeleteGroupChatEventRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteGroupChatEventRequest) GetMode() ModeType {
	if x != nil {
		return x.Mode
	}
	return ModeType_FROM_ME
}

func (x *DeleteGroupChatEventRequest) GetEventId() []int64 {
	if x != nil {
		return x.EventId
	}
	return nil
}

//*
// Параметры ответа на запрос на удаление события в групповом чате
type DeleteGroupChatEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Код возврата на выполнения запроса
	// OK - события успешно удалены;
	// PARTIAL_SUCCESS - только часть событий удалось удалить. Те что удалить не удалось вернутся в failed_events;
	// CHAT_NOT_FOUND - чат не найден
	ResultCode    ResultCode `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"`
	DeletedEvents []int64    `protobuf:"varint,2,rep,packed,name=deleted_events,json=deletedEvents,proto3" json:"deleted_events,omitempty"` // Список идентификатором событий, которые были удалены
	FailedEvents  []int64    `protobuf:"varint,3,rep,packed,name=failed_events,json=failedEvents,proto3" json:"failed_events,omitempty"`    // Список идентификатором событий, которые не удалось удалить
	Error         *Error     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                                              // Поле для передачи ошибки, при выполнении запроса (заполняется если resultCode != OK)
}

func (x *DeleteGroupChatEventResponse) Reset() {
	*x = DeleteGroupChatEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupChatEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupChatEventResponse) ProtoMessage() {}

func (x *DeleteGroupChatEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupChatEventResponse.ProtoReflect.Descriptor instead.
func (*DeleteGroupChatEventResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteGroupChatEventResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *DeleteGroupChatEventResponse) GetDeletedEvents() []int64 {
	if x != nil {
		return x.DeletedEvents
	}
	return nil
}

func (x *DeleteGroupChatEventResponse) GetFailedEvents() []int64 {
	if x != nil {
		return x.FailedEvents
	}
	return nil
}

func (x *DeleteGroupChatEventResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

//*
// Параметры запроса на изменения событий в групповом чате
type ChangeGroupChatEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId int64 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ChatId  int64 `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"` // заполняется на уровне group сервиса
	// values:
	// string plaintext
	// repeated int64 mentions - перечисление задается через '\n'
	// repeated string urls - перечисление задается через '\n'
	Values map[string]string `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChangeGroupChatEventRequest) Reset() {
	*x = ChangeGroupChatEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeGroupChatEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeGroupChatEventRequest) ProtoMessage() {}

func (x *ChangeGroupChatEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeGroupChatEventRequest.ProtoReflect.Descriptor instead.
func (*ChangeGroupChatEventRequest) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{29}
}

func (x *ChangeGroupChatEventRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChangeGroupChatEventRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *ChangeGroupChatEventRequest) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChangeGroupChatEventRequest) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

//*
// Параметры ответа на запрос на изменения событий в групповом чате
type ChangeGroupChatEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode ResultCode        `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"`
	Event      *ChatMessageEvent `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	Error      *Error            `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ChangeGroupChatEventResponse) Reset() {
	*x = ChangeGroupChatEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeGroupChatEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeGroupChatEventResponse) ProtoMessage() {}

func (x *ChangeGroupChatEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeGroupChatEventResponse.ProtoReflect.Descriptor instead.
func (*ChangeGroupChatEventResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{30}
}

func (x *ChangeGroupChatEventResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *ChangeGroupChatEventResponse) GetEvent() *ChatMessageEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ChangeGroupChatEventResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

//*
// Параметры запроса на удаление события в чате
type DeleteEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId  int64             `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`   // Идентификатор чата, по которому запрашиваются события
	EventId []*ComplexEventId `protobuf:"bytes,2,rep,name=event_id,json=eventId,proto3" json:"event_id,omitempty"` // Идентификатор событий, которые необходимо удалить
}

func (x *DeleteEventRequest) Reset() {
	*x = DeleteEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventRequest) ProtoMessage() {}

func (x *DeleteEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventRequest.ProtoReflect.Descriptor instead.
func (*DeleteEventRequest) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteEventRequest) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *DeleteEventRequest) GetEventId() []*ComplexEventId {
	if x != nil {
		return x.EventId
	}
	return nil
}

//*
// Параметры ответа на запрос на удаление события в чате
type DeleteEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Код возврата на выполнения запроса
	// OK - события успешно удалены;
	// PARTIAL_SUCCESS - только часть событий удалось удалить. Те что удалить не удалось вернутся в failed_events;
	// CHAT_NOT_FOUND - чат не найден
	ResultCode    ResultCode        `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"`
	DeletedEvents []*ComplexEventId `protobuf:"bytes,2,rep,name=deleted_events,json=deletedEvents,proto3" json:"deleted_events,omitempty"` // Список идентификатором событий, которые были удалены
	FailedEvents  []*ComplexEventId `protobuf:"bytes,3,rep,name=failed_events,json=failedEvents,proto3" json:"failed_events,omitempty"`    // Список идентификатором событий, которые не удалось удалить
	Error         *Error            `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                                      // Поле для передачи ошибки, при выполнении запроса (заполняется если resultCode != OK)
}

func (x *DeleteEventResponse) Reset() {
	*x = DeleteEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventResponse) ProtoMessage() {}

func (x *DeleteEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventResponse.ProtoReflect.Descriptor instead.
func (*DeleteEventResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteEventResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *DeleteEventResponse) GetDeletedEvents() []*ComplexEventId {
	if x != nil {
		return x.DeletedEvents
	}
	return nil
}

func (x *DeleteEventResponse) GetFailedEvents() []*ComplexEventId {
	if x != nil {
		return x.FailedEvents
	}
	return nil
}

func (x *DeleteEventResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

//
//*  Параметры запроса для передачи информации об измененном сообщении
type ChangeMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64           `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId  *ComplexEventId `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ChatId   int64           `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                                   // заполняется на уровне post сервиса
	ChatType ChatType        `protobuf:"varint,5,opt,name=chat_type,json=chatType,proto3,enum=protei.uc.api.ChatType" json:"chat_type,omitempty"` // Тип чата
	// values:
	// string plaintext
	// repeated int64 mentions - перечисление задается через '\n'
	// repeated string urls - перечисление задается через '\n'
	Values map[string]string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChangeMessageRequest) Reset() {
	*x = ChangeMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMessageRequest) ProtoMessage() {}

func (x *ChangeMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMessageRequest.ProtoReflect.Descriptor instead.
func (*ChangeMessageRequest) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{33}
}

func (x *ChangeMessageRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChangeMessageRequest) GetEventId() *ComplexEventId {
	if x != nil {
		return x.EventId
	}
	return nil
}

func (x *ChangeMessageRequest) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChangeMessageRequest) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_P2P
}

func (x *ChangeMessageRequest) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

//
//* Параметры ответа на запрос пометить список сообщений как "Доставленное" | "Прочитанное"
type MarkListEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode ResultCode            `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"` // Код возврата
	Success    []*MarkEventsResponse `protobuf:"bytes,2,rep,name=success,proto3" json:"success,omitempty"`                                                        // Список сообщений успешно помеченные как "доставленное" | "прочитанное"
	Failed     []*MarkEventsResponse `protobuf:"bytes,3,rep,name=failed,proto3" json:"failed,omitempty"`                                                          // Список сообщений которые не удалось пометить как "доставленное" | "прочитанное"
}

func (x *MarkListEventsResponse) Reset() {
	*x = MarkListEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkListEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkListEventsResponse) ProtoMessage() {}

func (x *MarkListEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkListEventsResponse.ProtoReflect.Descriptor instead.
func (*MarkListEventsResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{34}
}

func (x *MarkListEventsResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *MarkListEventsResponse) GetSuccess() []*MarkEventsResponse {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *MarkListEventsResponse) GetFailed() []*MarkEventsResponse {
	if x != nil {
		return x.Failed
	}
	return nil
}

//
//* Информация о событии, которое нужно пометить как "Доставленное" | "Прочитанное", возвращенная с БД.
type MarkEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int64  `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"` // Идентификатор чата
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                  // Информация о ошибке
}

func (x *MarkEventsResponse) Reset() {
	*x = MarkEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkEventsResponse) ProtoMessage() {}

func (x *MarkEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkEventsResponse.ProtoReflect.Descriptor instead.
func (*MarkEventsResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{35}
}

func (x *MarkEventsResponse) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *MarkEventsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type FileMetaType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Имя файла
	Mimetype   string `protobuf:"bytes,2,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	UploadedAt int64  `protobuf:"varint,3,opt,name=uploaded_at,json=uploadedAt,proto3" json:"uploaded_at,omitempty"`
	Size       uint32 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *FileMetaType) Reset() {
	*x = FileMetaType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMetaType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetaType) ProtoMessage() {}

func (x *FileMetaType) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetaType.ProtoReflect.Descriptor instead.
func (*FileMetaType) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{36}
}

func (x *FileMetaType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileMetaType) GetMimetype() string {
	if x != nil {
		return x.Mimetype
	}
	return ""
}

func (x *FileMetaType) GetUploadedAt() int64 {
	if x != nil {
		return x.UploadedAt
	}
	return 0
}

func (x *FileMetaType) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

//
//* Параметры запроса для передачи информации о старте/окончании набора текста
type TypingEventType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64               `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                   // Уникальный идентификатор пользователя-отправителя
	ChatId   int64               `protobuf:"varint,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                                   // Уникальный идентификатор чата, в рамках которого идет typing
	ChatType ChatType            `protobuf:"varint,3,opt,name=chat_type,json=chatType,proto3,enum=protei.uc.api.ChatType" json:"chat_type,omitempty"` // Тип чата, в рамках которого идет typing
	Timeout  int64               `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`                                               // Время которое будет клиент показывать сообщение "Печатает"
	Type     ModeTypingEventType `protobuf:"varint,5,opt,name=type,proto3,enum=protei.uc.api.ModeTypingEventType" json:"type,omitempty"`
}

func (x *TypingEventType) Reset() {
	*x = TypingEventType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypingEventType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypingEventType) ProtoMessage() {}

func (x *TypingEventType) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypingEventType.ProtoReflect.Descriptor instead.
func (*TypingEventType) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{37}
}

func (x *TypingEventType) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TypingEventType) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TypingEventType) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_P2P
}

func (x *TypingEventType) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TypingEventType) GetType() ModeTypingEventType {
	if x != nil {
		return x.Type
	}
	return ModeTypingEventType_START
}

//*
// Ответ на запроса на получение информации о пользователе.
type GetUserInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Результат выполнения команды.
	// OK - учетная запись найдена и возвращены данные о ней;
	// NOT_FOUND - учетная запись с указанным идентификатором не существует;
	// Любой другой код в случае ошибки
	ResultCode ResultCode       `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"`
	Info       *GeneralUserInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`   // Информация о пользователе
	Error      *Error           `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"` // Поле для передачи ошибки, при выполнении запроса (заполняется если resultCode != OK)
}

func (x *GetUserInfoResponse) Reset() {
	*x = GetUserInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResponse) ProtoMessage() {}

func (x *GetUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResponse.ProtoReflect.Descriptor instead.
func (*GetUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{38}
}

func (x *GetUserInfoResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *GetUserInfoResponse) GetInfo() *GeneralUserInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetUserInfoResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

//*
// Параметры запроса модификации группового вызова
type ModifyGroupCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       int64    `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"` // Идентификатор группы
	Members       []int64  `protobuf:"varint,2,rep,packed,name=members,proto3" json:"members,omitempty"`         // Идентификаторы участника
	SendAudio     *bool    `protobuf:"varint,3,opt,name=sendAudio,proto3,oneof" json:"sendAudio,omitempty"`      // Отправка audio
	RecvAudio     *bool    `protobuf:"varint,4,opt,name=recvAudio,proto3,oneof" json:"recvAudio,omitempty"`      // Получение audio
	SendVideo     *bool    `protobuf:"varint,5,opt,name=sendVideo,proto3,oneof" json:"sendVideo,omitempty"`      // Отправка video
	RecvVideo     *bool    `protobuf:"varint,6,opt,name=recvVideo,proto3,oneof" json:"recvVideo,omitempty"`      // Получение video
	Layout        *Layout  `protobuf:"bytes,7,opt,name=layout,proto3,oneof" json:"layout,omitempty"`             // Раскладка конференции
	PresentParams []string `protobuf:"bytes,8,rep,name=presentParams,proto3" json:"presentParams,omitempty"`
}

func (x *ModifyGroupCallRequest) Reset() {
	*x = ModifyGroupCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyGroupCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyGroupCallRequest) ProtoMessage() {}

func (x *ModifyGroupCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyGroupCallRequest.ProtoReflect.Descriptor instead.
func (*ModifyGroupCallRequest) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{39}
}

func (x *ModifyGroupCallRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ModifyGroupCallRequest) GetMembers() []int64 {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ModifyGroupCallRequest) GetSendAudio() bool {
	if x != nil && x.SendAudio != nil {
		return *x.SendAudio
	}
	return false
}

func (x *ModifyGroupCallRequest) GetRecvAudio() bool {
	if x != nil && x.RecvAudio != nil {
		return *x.RecvAudio
	}
	return false
}

func (x *ModifyGroupCallRequest) GetSendVideo() bool {
	if x != nil && x.SendVideo != nil {
		return *x.SendVideo
	}
	return false
}

func (x *ModifyGroupCallRequest) GetRecvVideo() bool {
	if x != nil && x.RecvVideo != nil {
		return *x.RecvVideo
	}
	return false
}

func (x *ModifyGroupCallRequest) GetLayout() *Layout {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *ModifyGroupCallRequest) GetPresentParams() []string {
	if x != nil {
		return x.PresentParams
	}
	return nil
}

//*
// Параметры ответа на запрос модификации группового вызова
type ModifyGroupCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Результат выполнения команды.
	// OK - команда успешно выполнена;
	// NOT_FOUND - активного группового вызова не найдено
	ResultCode ResultCode `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=protei.uc.api.ResultCode" json:"result_code,omitempty"` //
	Error      *Error     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                                                            // Сообщение об ошибке
}

func (x *ModifyGroupCallResponse) Reset() {
	*x = ModifyGroupCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyGroupCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyGroupCallResponse) ProtoMessage() {}

func (x *ModifyGroupCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyGroupCallResponse.ProtoReflect.Descriptor instead.
func (*ModifyGroupCallResponse) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{40}
}

func (x *ModifyGroupCallResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *ModifyGroupCallResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type Layout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenDivisionType ScreenDivisionType `protobuf:"varint,1,opt,name=screenDivisionType,proto3,enum=protei.uc.api.ScreenDivisionType" json:"screenDivisionType,omitempty"`
}

func (x *Layout) Reset() {
	*x = Layout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uc_types_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layout) ProtoMessage() {}

func (x *Layout) ProtoReflect() protoreflect.Message {
	mi := &file_uc_types_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layout.ProtoReflect.Descriptor instead.
func (*Layout) Descriptor() ([]byte, []int) {
	return file_uc_types_proto_rawDescGZIP(), []int{41}
}

func (x *Layout) GetScreenDivisionType() ScreenDivisionType {
	if x != nil {
		return x.ScreenDivisionType
	}
	return ScreenDivisionType_ALL_EQUALLY
}

var File_uc_types_proto protoreflect.FileDescriptor

var file_uc_types_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x75, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x1a,
	0x15, 0x67, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22, 0xde, 0x02, 0x0a, 0x12, 0x50, 0x32,
	0x50, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22, 0xc7, 0x03, 0x0a, 0x0f, 0x50,
	0x32, 0x50, 0x43, 0x68, 0x61, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x22, 0xd8, 0x03, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68,
	0x61, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x18, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x79, 0x4d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22,
	0xae, 0x04, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69,
	0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe2, 0x02, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd6, 0x01,
	0x0a, 0x15, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x12, 0x4b, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x55, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x16, 0x4d, 0x61, 0x6b,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69,
	0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x52,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc0, 0x02, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69,
	0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48,
	0x0a, 0x11, 0x63, 0x75, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x4c, 0x61, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x1b, 0x4d, 0x61,
	0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9c, 0x02, 0x0a,
	0x1c, 0x4d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x87, 0x01, 0x0a, 0x1b,
	0x4d, 0x61, 0x72, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x87, 0x02, 0x0a, 0x1c, 0x4d, 0x61, 0x72, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63,
	0x75, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x12, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x4c,
	0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x96, 0x01, 0x0a, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x21, 0x4d, 0x61, 0x72,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x75,
	0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x54,
	0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xcc, 0x02, 0x0a, 0x0d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69,
	0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x97, 0x01, 0x0a,
	0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf5, 0x01, 0x0a, 0x1b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xbd, 0x01, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e,
	0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x67, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x87, 0x02, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x44, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xbc, 0x02, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x47, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75,
	0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x22, 0x59, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x73, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf6, 0x02, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x76, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x76, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x73, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x76, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x76, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x48, 0x04, 0x52, 0x06, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72,
	0x65, 0x63, 0x76, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22,
	0x81, 0x01, 0x0a, 0x17, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x2e,
	0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x5b, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x51, 0x0a,
	0x12, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x2e, 0x75, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x2a, 0xc0, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x45,
	0x52, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x07, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x09, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x0b, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x41, 0x4c, 0x4c, 0x10, 0x65, 0x12, 0x0c, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c,
	0x10, 0xff, 0x01, 0x2a, 0x4b, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x59, 0x50, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x04,
	0x2a, 0x38, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x2a, 0x1e, 0x0a, 0x08, 0x43, 0x68,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x32, 0x50, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x2a, 0x21, 0x0a, 0x0d, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x2a, 0x0a,
	0x13, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x2a, 0x2a, 0x0a, 0x08, 0x4d, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4d, 0x45,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x52, 0x59,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x2a, 0xad, 0x01, 0x0a, 0x09, 0x56, 0x63, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x43, 0x55, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x41, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x48, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x0a, 0x2a, 0x67, 0x0a, 0x12, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x4c, 0x4c, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x41,
	0x4b, 0x45, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x45, 0x52,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x42, 0x0e,
	0x5a, 0x0c, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_uc_types_proto_rawDescOnce sync.Once
	file_uc_types_proto_rawDescData = file_uc_types_proto_rawDesc
)

func file_uc_types_proto_rawDescGZIP() []byte {
	file_uc_types_proto_rawDescOnce.Do(func() {
		file_uc_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_uc_types_proto_rawDescData)
	})
	return file_uc_types_proto_rawDescData
}

var file_uc_types_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_uc_types_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_uc_types_proto_goTypes = []interface{}{
	(ChatMessageType)(0),                      // 0: protei.uc.api.ChatMessageType
	(NotifyType)(0),                           // 1: protei.uc.api.NotifyType
	(CallModeType)(0),                         // 2: protei.uc.api.CallModeType
	(ChatType)(0),                             // 3: protei.uc.api.ChatType
	(DirectionType)(0),                        // 4: protei.uc.api.DirectionType
	(ModeTypingEventType)(0),                  // 5: protei.uc.api.ModeTypingEventType
	(ModeType)(0),                             // 6: protei.uc.api.ModeType
	(VcsStatus)(0),                            // 7: protei.uc.api.VcsStatus
	(ScreenDivisionType)(0),                   // 8: protei.uc.api.ScreenDivisionType
	(*GeneralUserInfo)(nil),                   // 9: protei.uc.api.GeneralUserInfo
	(*P2PChatDescription)(nil),                // 10: protei.uc.api.P2PChatDescription
	(*P2PChatSnapshot)(nil),                   // 11: protei.uc.api.P2PChatSnapshot
	(*GroupChatSnapshot)(nil),                 // 12: protei.uc.api.GroupChatSnapshot
	(*ChatMessageEvent)(nil),                  // 13: protei.uc.api.ChatMessageEvent
	(*ChatNotifyEvent)(nil),                   // 14: protei.uc.api.ChatNotifyEvent
	(*ChatDeleteNotify)(nil),                  // 15: protei.uc.api.ChatDeleteNotify
	(*ChatDeleteNotifyEvent)(nil),             // 16: protei.uc.api.ChatDeleteNotifyEvent
	(*OpenChatUIControlEvent)(nil),            // 17: protei.uc.api.OpenChatUIControlEvent
	(*MakeCallUIControlEvent)(nil),            // 18: protei.uc.api.MakeCallUIControlEvent
	(*StoreMessageRequest)(nil),               // 19: protei.uc.api.StoreMessageRequest
	(*StoreMessageResponse)(nil),              // 20: protei.uc.api.StoreMessageResponse
	(*FailedEvent)(nil),                       // 21: protei.uc.api.FailedEvent
	(*ComplexEventId)(nil),                    // 22: protei.uc.api.ComplexEventId
	(*MarkEventAsReadRequest)(nil),            // 23: protei.uc.api.MarkEventAsReadRequest
	(*MarkEventAsReadResponse)(nil),           // 24: protei.uc.api.MarkEventAsReadResponse
	(*MarkEventAsDeliveredRequest)(nil),       // 25: protei.uc.api.MarkEventAsDeliveredRequest
	(*MarkEventAsDeliveredResponse)(nil),      // 26: protei.uc.api.MarkEventAsDeliveredResponse
	(*MarkGroupEventAsReadRequest)(nil),       // 27: protei.uc.api.MarkGroupEventAsReadRequest
	(*MarkGroupEventAsReadResponse)(nil),      // 28: protei.uc.api.MarkGroupEventAsReadResponse
	(*MarkGroupEventAsDeliveredRequest)(nil),  // 29: protei.uc.api.MarkGroupEventAsDeliveredRequest
	(*MarkGroupEventAsDeliveredResponse)(nil), // 30: protei.uc.api.MarkGroupEventAsDeliveredResponse
	(*GroupChatInfoRequest)(nil),              // 31: protei.uc.api.GroupChatInfoRequest
	(*GroupChatInfoResponse)(nil),             // 32: protei.uc.api.GroupChatInfoResponse
	(*GroupChatInfo)(nil),                     // 33: protei.uc.api.GroupChatInfo
	(*CreateGroupChatRequest)(nil),            // 34: protei.uc.api.CreateGroupChatRequest
	(*CreateGroupChatResponse)(nil),           // 35: protei.uc.api.CreateGroupChatResponse
	(*DeleteGroupChatEventRequest)(nil),       // 36: protei.uc.api.DeleteGroupChatEventRequest
	(*DeleteGroupChatEventResponse)(nil),      // 37: protei.uc.api.DeleteGroupChatEventResponse
	(*ChangeGroupChatEventRequest)(nil),       // 38: protei.uc.api.ChangeGroupChatEventRequest
	(*ChangeGroupChatEventResponse)(nil),      // 39: protei.uc.api.ChangeGroupChatEventResponse
	(*DeleteEventRequest)(nil),                // 40: protei.uc.api.DeleteEventRequest
	(*DeleteEventResponse)(nil),               // 41: protei.uc.api.DeleteEventResponse
	(*ChangeMessageRequest)(nil),              // 42: protei.uc.api.ChangeMessageRequest
	(*MarkListEventsResponse)(nil),            // 43: protei.uc.api.MarkListEventsResponse
	(*MarkEventsResponse)(nil),                // 44: protei.uc.api.MarkEventsResponse
	(*FileMetaType)(nil),                      // 45: protei.uc.api.FileMetaType
	(*TypingEventType)(nil),                   // 46: protei.uc.api.TypingEventType
	(*GetUserInfoResponse)(nil),               // 47: protei.uc.api.GetUserInfoResponse
	(*ModifyGroupCallRequest)(nil),            // 48: protei.uc.api.ModifyGroupCallRequest
	(*ModifyGroupCallResponse)(nil),           // 49: protei.uc.api.ModifyGroupCallResponse
	(*Layout)(nil),                            // 50: protei.uc.api.Layout
	nil,                                       // 51: protei.uc.api.ChatMessageEvent.OptionsEntry
	nil,                                       // 52: protei.uc.api.ChatNotifyEvent.OptionsEntry
	nil,                                       // 53: protei.uc.api.ChatDeleteNotifyEvent.OptionsEntry
	nil,                                       // 54: protei.uc.api.ChangeGroupChatEventRequest.ValuesEntry
	nil,                                       // 55: protei.uc.api.ChangeMessageRequest.ValuesEntry
	(ResultCode)(0),                           // 56: protei.uc.api.ResultCode
	(*Error)(nil),                             // 57: protei.uc.api.Error
}
var file_uc_types_proto_depIdxs = []int32{
	13, // 0: protei.uc.api.P2PChatSnapshot.events:type_name -> protei.uc.api.ChatMessageEvent
	13, // 1: protei.uc.api.P2PChatSnapshot.last_event:type_name -> protei.uc.api.ChatMessageEvent
	13, // 2: protei.uc.api.GroupChatSnapshot.events:type_name -> protei.uc.api.ChatMessageEvent
	13, // 3: protei.uc.api.GroupChatSnapshot.last_event:type_name -> protei.uc.api.ChatMessageEvent
	0,  // 4: protei.uc.api.ChatMessageEvent.type:type_name -> protei.uc.api.ChatMessageType
	51, // 5: protei.uc.api.ChatMessageEvent.options:type_name -> protei.uc.api.ChatMessageEvent.OptionsEntry
	3,  // 6: protei.uc.api.ChatMessageEvent.chat_type:type_name -> protei.uc.api.ChatType
	1,  // 7: protei.uc.api.ChatNotifyEvent.type:type_name -> protei.uc.api.NotifyType
	52, // 8: protei.uc.api.ChatNotifyEvent.options:type_name -> protei.uc.api.ChatNotifyEvent.OptionsEntry
	53, // 9: protei.uc.api.ChatDeleteNotifyEvent.options:type_name -> protei.uc.api.ChatDeleteNotifyEvent.OptionsEntry
	2,  // 10: protei.uc.api.MakeCallUIControlEvent.mode:type_name -> protei.uc.api.CallModeType
	13, // 11: protei.uc.api.StoreMessageRequest.events:type_name -> protei.uc.api.ChatMessageEvent
	56, // 12: protei.uc.api.StoreMessageResponse.result_code:type_name -> protei.uc.api.ResultCode
	13, // 13: protei.uc.api.StoreMessageResponse.stored_events:type_name -> protei.uc.api.ChatMessageEvent
	21, // 14: protei.uc.api.StoreMessageResponse.failed_events:type_name -> protei.uc.api.FailedEvent
	56, // 15: protei.uc.api.FailedEvent.result_code:type_name -> protei.uc.api.ResultCode
	57, // 16: protei.uc.api.FailedEvent.error:type_name -> protei.uc.api.Error
	22, // 17: protei.uc.api.MarkEventAsReadRequest.event_id:type_name -> protei.uc.api.ComplexEventId
	56, // 18: protei.uc.api.MarkEventAsReadResponse.result_code:type_name -> protei.uc.api.ResultCode
	22, // 19: protei.uc.api.MarkEventAsReadResponse.cur_last_event_id:type_name -> protei.uc.api.ComplexEventId
	22, // 20: protei.uc.api.MarkEventAsReadResponse.prev_last_event_id:type_name -> protei.uc.api.ComplexEventId
	57, // 21: protei.uc.api.MarkEventAsReadResponse.error:type_name -> protei.uc.api.Error
	22, // 22: protei.uc.api.MarkEventAsDeliveredRequest.event_id:type_name -> protei.uc.api.ComplexEventId
	56, // 23: protei.uc.api.MarkEventAsDeliveredResponse.result_code:type_name -> protei.uc.api.ResultCode
	22, // 24: protei.uc.api.MarkEventAsDeliveredResponse.cur_last_event_id:type_name -> protei.uc.api.ComplexEventId
	22, // 25: protei.uc.api.MarkEventAsDeliveredResponse.prev_last_event_id:type_name -> protei.uc.api.ComplexEventId
	57, // 26: protei.uc.api.MarkEventAsDeliveredResponse.error:type_name -> protei.uc.api.Error
	56, // 27: protei.uc.api.MarkGroupEventAsReadResponse.result_code:type_name -> protei.uc.api.ResultCode
	57, // 28: protei.uc.api.MarkGroupEventAsReadResponse.error:type_name -> protei.uc.api.Error
	56, // 29: protei.uc.api.MarkGroupEventAsDeliveredResponse.result_code:type_name -> protei.uc.api.ResultCode
	57, // 30: protei.uc.api.MarkGroupEventAsDeliveredResponse.error:type_name -> protei.uc.api.Error
	56, // 31: protei.uc.api.GroupChatInfoResponse.result_code:type_name -> protei.uc.api.ResultCode
	57, // 32: protei.uc.api.GroupChatInfoResponse.error:type_name -> protei.uc.api.Error
	33, // 33: protei.uc.api.GroupChatInfoResponse.info:type_name -> protei.uc.api.GroupChatInfo
	56, // 34: protei.uc.api.CreateGroupChatResponse.result_code:type_name -> protei.uc.api.ResultCode
	57, // 35: protei.uc.api.CreateGroupChatResponse.error:type_name -> protei.uc.api.Error
	33, // 36: protei.uc.api.CreateGroupChatResponse.info:type_name -> protei.uc.api.GroupChatInfo
	6,  // 37: protei.uc.api.DeleteGroupChatEventRequest.mode:type_name -> protei.uc.api.ModeType
	56, // 38: protei.uc.api.DeleteGroupChatEventResponse.result_code:type_name -> protei.uc.api.ResultCode
	57, // 39: protei.uc.api.DeleteGroupChatEventResponse.error:type_name -> protei.uc.api.Error
	54, // 40: protei.uc.api.ChangeGroupChatEventRequest.values:type_name -> protei.uc.api.ChangeGroupChatEventRequest.ValuesEntry
	56, // 41: protei.uc.api.ChangeGroupChatEventResponse.result_code:type_name -> protei.uc.api.ResultCode
	13, // 42: protei.uc.api.ChangeGroupChatEventResponse.event:type_name -> protei.uc.api.ChatMessageEvent
	57, // 43: protei.uc.api.ChangeGroupChatEventResponse.error:type_name -> protei.uc.api.Error
	22, // 44: protei.uc.api.DeleteEventRequest.event_id:type_name -> protei.uc.api.ComplexEventId
	56, // 45: protei.uc.api.DeleteEventResponse.result_code:type_name -> protei.uc.api.ResultCode
	22, // 46: protei.uc.api.DeleteEventResponse.deleted_events:type_name -> protei.uc.api.ComplexEventId
	22, // 47: protei.uc.api.DeleteEventResponse.failed_events:type_name -> protei.uc.api.ComplexEventId
	57, // 48: protei.uc.api.DeleteEventResponse.error:type_name -> protei.uc.api.Error
	22, // 49: protei.uc.api.ChangeMessageRequest.event_id:type_name -> protei.uc.api.ComplexEventId
	3,  // 50: protei.uc.api.ChangeMessageRequest.chat_type:type_name -> protei.uc.api.ChatType
	55, // 51: protei.uc.api.ChangeMessageRequest.values:type_name -> protei.uc.api.ChangeMessageRequest.ValuesEntry
	56, // 52: protei.uc.api.MarkListEventsResponse.result_code:type_name -> protei.uc.api.ResultCode
	44, // 53: protei.uc.api.MarkListEventsResponse.success:type_name -> protei.uc.api.MarkEventsResponse
	44, // 54: protei.uc.api.MarkListEventsResponse.failed:type_name -> protei.uc.api.MarkEventsResponse
	57, // 55: protei.uc.api.MarkEventsResponse.error:type_name -> protei.uc.api.Error
	3,  // 56: protei.uc.api.TypingEventType.chat_type:type_name -> protei.uc.api.ChatType
	5,  // 57: protei.uc.api.TypingEventType.type:type_name -> protei.uc.api.ModeTypingEventType
	56, // 58: protei.uc.api.GetUserInfoResponse.result_code:type_name -> protei.uc.api.ResultCode
	9,  // 59: protei.uc.api.GetUserInfoResponse.info:type_name -> protei.uc.api.GeneralUserInfo
	57, // 60: protei.uc.api.GetUserInfoResponse.error:type_name -> protei.uc.api.Error
	50, // 61: protei.uc.api.ModifyGroupCallRequest.layout:type_name -> protei.uc.api.Layout
	56, // 62: protei.uc.api.ModifyGroupCallResponse.result_code:type_name -> protei.uc.api.ResultCode
	57, // 63: protei.uc.api.ModifyGroupCallResponse.error:type_name -> protei.uc.api.Error
	8,  // 64: protei.uc.api.Layout.screenDivisionType:type_name -> protei.uc.api.ScreenDivisionType
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_uc_types_proto_init() }
func file_uc_types_proto_init() {
	if File_uc_types_proto != nil {
		return
	}
	file_gen_proto_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_uc_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PChatDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PChatSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChatSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatNotifyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatDeleteNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatDeleteNotifyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenChatUIControlEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeCallUIControlEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexEventId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkEventAsReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkEventAsReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkEventAsDeliveredRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkEventAsDeliveredResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkGroupEventAsReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkGroupEventAsReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkGroupEventAsDeliveredRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkGroupEventAsDeliveredResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChatInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChatInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupChatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupChatEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupChatEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeGroupChatEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeGroupChatEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkListEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMetaType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypingEventType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyGroupCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyGroupCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uc_types_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_uc_types_proto_msgTypes[39].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_uc_types_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_uc_types_proto_goTypes,
		DependencyIndexes: file_uc_types_proto_depIdxs,
		EnumInfos:         file_uc_types_proto_enumTypes,
		MessageInfos:      file_uc_types_proto_msgTypes,
	}.Build()
	File_uc_types_proto = out.File
	file_uc_types_proto_rawDesc = nil
	file_uc_types_proto_goTypes = nil
	file_uc_types_proto_depIdxs = nil
}
