// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoTemplateServiceClient is the client API for GoTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoTemplateServiceClient interface {
	TestMethod1(ctx context.Context, in *Method1Request, opts ...grpc.CallOption) (*Method1Response, error)
	TestMethod2(ctx context.Context, in *Method2Request, opts ...grpc.CallOption) (*Method2Response, error)
}

type goTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoTemplateServiceClient(cc grpc.ClientConnInterface) GoTemplateServiceClient {
	return &goTemplateServiceClient{cc}
}

func (c *goTemplateServiceClient) TestMethod1(ctx context.Context, in *Method1Request, opts ...grpc.CallOption) (*Method1Response, error) {
	out := new(Method1Response)
	err := c.cc.Invoke(ctx, "/protei.uc.api.GoTemplateService/TestMethod1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goTemplateServiceClient) TestMethod2(ctx context.Context, in *Method2Request, opts ...grpc.CallOption) (*Method2Response, error) {
	out := new(Method2Response)
	err := c.cc.Invoke(ctx, "/protei.uc.api.GoTemplateService/TestMethod2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoTemplateServiceServer is the server API for GoTemplateService service.
// All implementations must embed UnimplementedGoTemplateServiceServer
// for forward compatibility
type GoTemplateServiceServer interface {
	TestMethod1(context.Context, *Method1Request) (*Method1Response, error)
	TestMethod2(context.Context, *Method2Request) (*Method2Response, error)
	mustEmbedUnimplementedGoTemplateServiceServer()
}

// UnimplementedGoTemplateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoTemplateServiceServer struct {
}

func (UnimplementedGoTemplateServiceServer) TestMethod1(context.Context, *Method1Request) (*Method1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestMethod1 not implemented")
}
func (UnimplementedGoTemplateServiceServer) TestMethod2(context.Context, *Method2Request) (*Method2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestMethod2 not implemented")
}
func (UnimplementedGoTemplateServiceServer) mustEmbedUnimplementedGoTemplateServiceServer() {}

// UnsafeGoTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoTemplateServiceServer will
// result in compilation errors.
type UnsafeGoTemplateServiceServer interface {
	mustEmbedUnimplementedGoTemplateServiceServer()
}

func RegisterGoTemplateServiceServer(s grpc.ServiceRegistrar, srv GoTemplateServiceServer) {
	s.RegisterService(&GoTemplateService_ServiceDesc, srv)
}

func _GoTemplateService_TestMethod1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Method1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoTemplateServiceServer).TestMethod1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protei.uc.api.GoTemplateService/TestMethod1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoTemplateServiceServer).TestMethod1(ctx, req.(*Method1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoTemplateService_TestMethod2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Method2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoTemplateServiceServer).TestMethod2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protei.uc.api.GoTemplateService/TestMethod2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoTemplateServiceServer).TestMethod2(ctx, req.(*Method2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GoTemplateService_ServiceDesc is the grpc.ServiceDesc for GoTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protei.uc.api.GoTemplateService",
	HandlerType: (*GoTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestMethod1",
			Handler:    _GoTemplateService_TestMethod1_Handler,
		},
		{
			MethodName: "TestMethod2",
			Handler:    _GoTemplateService_TestMethod2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "GO_TEMPLATE_SERVICE.proto",
}
